buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: 'official', version: '1.17.1'

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

	runs {
		client {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			mods {
				aft_fabroads {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			mods {
				aft_fabroads {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				aft_fabroads {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
	// flatDir {
	//     dir 'libs'
	// }
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.17.1-37.1.1'

	// Real mod deobf dependency examples - these get remapped to your current mappings
	// compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
	// runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
	// implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

	// Examples using mod jars from ./libs
	// implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : "examplemod",
				"Specification-Vendor"    : "examplemodsareus",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "examplemodsareus",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}
